const util = require('util');
const rp = util.promisify(require('request'));
const fs = require('fs');
const {sleep} =require('./helper');
const signFile = fs.readFileSync('./rnaHybrid/signature.asc');

const headers = {
    'Content-Type': 'application/json'
};

const idUrl = 'rest/rnahybrid/rnahybrid_function_rnahybrid/request';
const statusUrl = 'rest/rnahybrid/rnahybrid_function_rnahybrid/statuscode';
const resultUrl = 'https://bibiserv.cebitec.uni-bielefeld.de/rest/rnahybrid/rnahybrid_function_rnahybrid/response';

const options = {
    url: 'https://bibiserv.cebitec.uni-bielefeld.de/',
    method: 'POST',
    headers: headers
};

function insertString(str, index, value) {
    return str.substr(0, index) + value + str.substr(index);
}

function splitLongRNAToFasta(rna){
    const header = rna.substr(0,rna.indexOf('\n'));
    let workingArea = rna.substr(rna.indexOf('\n')+1);
    let i = 1
    for (i = 1; i < workingArea.length; i++) {
        if (i*60 > workingArea.length){
            break;
        }
        workingArea = insertString(workingArea,i*60+i-1,'\n');
    }
    if (workingArea[workingArea.length-1] != '\n'){
        workingArea = insertString(workingArea,workingArea.length,'\n');
    }
    return header +'\n' + workingArea;
}
async function getResultId(target,mirna) {
    const opt = JSON.parse(JSON.stringify(options));
    opt.url += idUrl;
    const reqObject = {
        // rnahybrid_input_target_rna_sequences_:
        //     splitLongRNAToFasta(target)
        // , rnahybrid_input_mirna_sequences:
        //     splitLongRNAToFasta(mirna)
        "rnahybrid_input_target_rna_sequences_":splitLongRNAToFasta(target),
        "rnahybrid_input_mirna_sequences" : ">cel-let-7\nugagguaguagguuguauaguu\n"
        , paramset:{
            "rnahybrid_parameter_approximate_pvalue":"3utr_human",
            // "rnahybrid_parameter_hits_per_target":1,
            // "rnahybrid_parameter_generate_graphics":true
        }
    };
    opt.body = JSON.stringify(reqObject);
    console.log(opt.body)
    const res = await rp(opt);
    console.log(res.body);
    return res.body;
}

const testTarget = '>FZD4-201 utr3:protein_coding\nGGCTAGTCAGCCTCCATGCTTTCTTCATTTTGAAGGGGGGAATGCCAGCATTTTGGAGGAAATTCTACTAAAAGTTTTATGCAGTGAATCTCAGTTTGAACAAACTAGCAACAATTAAGTGACCCCCGTCAACCCACTGCCTCCCACCCCGACCCCAGCATCAAAAAACCAATGATTTTGCTGCAGACTTTGGAATGATCCAAAATGGAAAAGCCAGTTAGAGGCTTTCAAAGCTGTGAAAAATCAAAACGTTGATCACTTTAGCAGGTTGCAGCTTGGAGCGTGGAGGTCCTGCCTAGATTCCAGGAAGTCCAGGGCGATACTGTTTTCCCCTGCAGGGTGGGATTTGAGCTGTGAGTTGGTAACTAGCAGGGAGAAATATTAACTTTTTTAACCCTTTACCATTTTAAATACTAACTGGGTCTTTCAGATAGCAAAGCAATCTATAAACACTGGAAACGCTGGGTTCAGAAAAGTGTTACAAGAGTTTTATAGTTTGGCTGATGTAACATAAACATCTTCTGTGGTGCGCTGTCTGCTGTTTAGAACTTTGTGGACTGCACTCCCAAGAAGTGGTGTTAGAATCTTTCAGTGCCTTTGTCATAAAACAGTTATTTGAACAAACAAAAGTACTGTACTCACACACATAAGGTATCCAGTGGATTTTTCTTCTCTGTCTTCCTCTCTTAAATTTCAACATCTCTCTTCTTGGCTGCTGCTGTTTTCTTCATTTTATGTTAATGACTCAAAAAAGGTATTTTTATAGAATTTTTGTACTGCAGCATGCTTAAAGAGGGGAAAAGGAAGGGTGATTCACTTTCTGACAATCACTTAATTCAGAGGAAAATGAGATTTACTAAGTTGACTTACCTGACGGACCCCAGAGACCTATTGCATTGAGCAGTGGGGACTTAATATATTTTACTTGTGTGATTGCATCTATGCAGACGCCAGTCTGGAAGAGCTGAAATGTTAAGTTTCTTGGCAACTTTGCATTCACACAGATTAGCTGTGTAATTTTTGTGTGTCAATTACAATTAAAAGCACATTGTTGGACCATGACATAGTATACTCAACTGACTTTAAAACTATGGTCAACTTCAACTTGCATTCTCAGAATGATAGTGCCTTTAAAAATTTTTTTATTTTTTAAAGCATAAGAATGTTATCAGAATCTGGTCTACTTAGGACAATGGAGACTTTTTCAGTTTTATAAAGGGAACTGAGGACAGCTAATCCAACTACTTGGTGCGTAATTGTTTCCTAGTAATTGGCAAAGGCTCCTTGTAAGATTTCACTGGAGGCAGTGTGGCCTGGAGTATTTATATGGTGCTTAATGAATCTCCAGAATGCCAGCCAGAAGCCTGATTGGTTAGTAGGGAATAAAGTGTAGACCATATGAAATGAACTGCAAACTCTAATAGCCCAGGTCTTAATTGCCTTTAGCAGAGGTATCCAAAGCTTTTAAAATTTATGCATACGTTCTTCACAAGGGGGTACCCCCAGCAGCCTCTCGAAAATTGCACTTCTCTTAAAACTGTAACTGGCCTTTCTCTTACCTTGCCTTAGGCGTTCTAATCATGAGATCTTGGGGACAAATTGACTATGTCACAGGTTGCTCTCCTTGTAACTCATACCTGTCTGCTTCAGCAACTGCTTTGCAATGACATTTATTTATTAATTCATGCCTTAAAAAAATAGGAAGGGAAGCTTTTTTTTTTCTTTTTTTTTTTTTCAATCACACTTTGTGGAAAAACATTTCCAGGGACTCAAAATTCCAAAAAGGTGGTCAAATTCTGGAAGTAAGCATTTCCTCTTTTTTAAAAATTTGGTTTGAGCCTTATGCCCATAGTTTGACATTTCCCTTTCTTCTTTCCTTTTTGTTTTTGTGTGGTTCTTGAGCTCTCTGACATCAAGATGCATGTAAAGTCGATTGTATGTTTTGGAAGGCAAAGTCTTGGCTTTTGAGACTGAAGTTAAGTGGGCACAGGTGGCCCCTGCTGCTGTGCCCAGTCTGAGTACCTTGGCTAGACTCTAGGTCAGGCTCCAGGAGCATGAGAATTGATCCCCAGAAGAACCATTTTAACTCCATCTGATACTCCATTGCCTATGAAATGTAAAATGTGAACTCCCTGTGCTGCTTGTAGACAGTTCCCATAACTGTCCACGGCCCTGGAGCACGCACCCAGGGGCAGAGCCTGCCCTTACTCACGCTCTGCTCTGGTGTCTTGGGAGTTGTGCAGGGACTCTGGCCCAGGCAGGGGAAGGAAGACCAGGCGGTAGGGGACTGGTCTTGCTGTTAGAGTATAGAGGTTTGTAATGCAGTTTTCTTCATAATGTGTCAGTGATTGTGTGACCAAGGCAGCATCTAGCAGAAAGCCAGGCATGGAGTAGGTGATCGATACTTGTCAATGACTAAATAATAACAATAAAAGAGCACTTGGGTGAATCTGGGCACCTGATTTCTGAGTTTTGAGTTCTGGAGCTAGTGTTTTGACAATGCTTTGGGTTTTGACATGCCTTTTCCACAAATCTCTTGCCTTTTCAGGGCAAAGTGTATTTGATCAGAAGTGGCCATTTGGATTAGTAGCCTTAGCAATGCTACAGGGTTATAGGCCTCTCCTTTCACATTCCAGACAATGGAGAGTGTTTATGGTTTCAGGAAAAGAACTTTGTGGCTGAGGGGTCAGTTACCAGTGACCTTCAATCAACTCCATCACTTCTTAAATCGGTATTTGTTAAAAAAATCAGTTATTTTATTTATTGAGTGCCGACTGTAGTAAAGCCCTGAAATAGATAATCTCTGTTCTTCTAACTGATCTAGGATGGGGACGCACCCAGGTCTGCTGAACTTTACTGTTCCTCTGGGAAAGGAGCAGGGACCTCTGGAATTCCCATCTGTTTCACTGTCTCCATTCCATAAATCTCTTCCTGTGTGAGCCACCACACCCAGCCTGGGTCTCTCTACTTTTAACACATCTCTCATCCCTTTCCCAGGATTCCTTCCAAGTCAGTTACAGGTGGTTTTAACAGAAAGCATCAGCTCTGCTTCGTGACAGTCTCTGGAGAAATCCCTTAGGAAGACTATGAGAGTAGGCCACAAGGACATGGGCCCACACATCTGCTTTGGCTTTGCCGGCAATTCAGGGCTTGGGGTATTCCATGTGACTTGTATAGGTATATTTGAGGACAGCATCTTGCTAGAGAAAAGGTGAGGGTTGTTTTTCTTTCTCTGAAACCTACAGTAAATGGGTATGATTGTAGCTTCCTCAGAAATCCCTTGGCCTCCAGAGATTAAACATGGTGCAATGGCACCTCTGTCCAACCTCCTTTCTGGTAGATTCCTTTCTCCTGCTTCATATAGGCCAAACCTCAGGGCAAGGGAACATGGGGGTAGAGTGGTGCTGGCCAGAACCATCTGCTTGAGCTACTTGGTTGATTCATATCCTCTTTCCTTTATGGAGACCCATTTCCTGATCTCTGAGACTGTTGCTGAACTGGCAACTTACTTGGGCCTGAAACTGGAGAAGGGGTGACATTTTTTTAATTTCAGAGATGCTTTCTGATTTTCCTCTCCCAGGTCACTGTCTCACCTGCACTCTCCAAACTCAGGTTCCGGGAAGCTTGTGTGTCTAGATACTGAATTGAGATTCTGTTCAGCACCTTTTAGCTCTATACTCTCTGGCTCCCCTCATCCTCATGGTCACTGAATTAAATGCTTATTGTATTGAGAACCAAGATGGGACCTGAGGACACAAAGATGAGCTCAACAGTCTCAGCCCTAGAGGAATAGACTCAGGGATTTCACCAGGTCGGTGCAGTATTTGATTTCTGGTGAGGTGACCACAGCTGCAGTTAGGGAAGGGAGCCATTGAGCACAGACTTTGGAAGGAACCTTTTTTTTGTTGTTTGTTTGTTTGTTTGTTTGTTTGTTTGTTTGAGACAGGGTCTTGCTCTGTCACCCAGGCTGGGGCGCAATGGCACGATCTTGGCTCACTGCAACCTCTGCCTCCTGGGTTCAAGTGATTCTCCTGCCACAGCCTCCTGAGGAGCTGGGACTACAGGTGCGTGCTACCACGCCCAGCTACTTCTGTATTTTTAGTAGAGACGGGGTTTCACTGTGTTGGCCAGGCTGGTCTCGAACTCCTGACCTCATGATCTGCCCGCCTCAGCCTCCCAAAGTGCTGGGATTACAAGTGTGAGCCACCACACCTGGCCTGGAAGGAACCTCTTAAAATCAGTTTACGTCTTGTATTTTGTTCTGTGATGGAGGACACTGGAGAGAGTTGCTATTCCAGTCAATCATGTCGAGTCACTGGACTCTGAAAATCCTATTGGTTCCTTTATTTTATTTGAGTTTAGAGTTCCCTTCTGGGTTTGTATTATGTCTGGCAAATGACCTGGGTTATCACTTTTCCTCCAGGGTTAGATCATAGATCTTGGAAACTCCTTAGAGAGCATTTTGCTCCTACCAAGGATCAGATACTGGAGCCCCACATAATAGATTTCATTTCACTCTAGCCTACATAGAGCTTTCTGTTGCTGTCTCTTGCCATGCACTTGTGCGGTGATTACACACTTGACAGTACCAGGAGACAAATGACTTACAGATCCCCCGACATGCCTCTTCCCCTTGGCAAGCTCAGTTGCCCTGATAGTAGCATGTTTCTGTTTCTGATGTACCTTTTTTCTCTTCTTCTTTGCATCAGCCAATTCCCAGAATTTCCCCAGGCAATTTGTAGAGGACCTTTTTGGGGTCCTATATGAGCCATGTCCTCAAAGCTTTTAAACCTCCTTGCTCTCCTACAATATTCAGTACATGACCACTGTCATCCTAGAAGGCTTCTGAAAAGAGGGGCAAGAGCCACTCTGCGCCACAAAGGTTGGGTCCATCTTCTCTCCGAGGTTGTGAAAGTTTTCAAATTGTACTAATAGGCTGGGGCCCTGACTTGGCTGTGGGCTTTGGGAGGGGTAAGCTGCTTTCTAGATCTCTCCCAGTGAGGCATGGAGGTGTTTCTGAATTTTGTCTACCTCACAGGGATGTTGTGAGGCTTGAAAAGGTCAAAAAATGATGGCCCCTTGAGCTCTTTGTAAGAAAGGTAGATGAAATATCGGATGTAATCTGAAAAAAAGATAAAATGTGACTTCCCCTGCTCTGTGCAGCAGTCGGGCTGGATGCTCTGTGGCCTTTCTTGGGTCCTCATGCCACCCCACAGCTCCAGGAACCTTGAAGCCAATCTGGGGGACTTTCAGATGTTTGACAAAGAGGTACCAGGCAAACTTCCTGCTACACATGCCCTGAATGAATTGCTAAATTTCAAAGGAAATGGACCCTGCTTTTAAGGATGTACAAAAGTATGTCTGCATCGATGTCTGTACTGTAAATTTCTAATTTATCACTGTACAAAGAAAACCCCTTGCTATTTAATTTTGTATTAAAGGAAAATAAAGTTTTGTTTGTTA';

const testMirna = ">MIMAT0004608\nCCUGUGAAAUUCAGUUCUUCAG"

async function getResult(resultId){
    const opt = JSON.parse(JSON.stringify(options));
    opt.url += statusUrl;
    opt.headers['Content-Type'] = 'text/plain';
    opt.body = resultId;
    let res = await rp(opt);
    console.log(res.body);
    while (res.body.toString() != '600'){
        if (parseInt(res.body.toString()) >= 700)
            return null;
        await sleep(3000);
        res = await rp(opt);
        console.log(res.body);
    }
    opt.url = resultUrl;
    const finalRes = await rp(opt);
    return finalRes.body;
}

async function get_rnaHybrid(target,mirna){
    const rid = await getResultId(target,mirna);
    getResult(rid);
}
get_rnaHybrid(testTarget,testMirna);

const gs = require('ghostscript4js');
const { holdReady } = require('jquery');
async function convertPsToPDF(fileName){
    const inpFile = `./rnaHybrid/${fileName}.ps`
    fs.exists(inpFile,()=>{
        try {
            // Take decision based on Ghostscript version
            const version = gs.version()
            // redo the bounding box
            const content = fs.readFileSync(inpFile,{encoding:'utf-8'}).split('\n');
            const toReplace = content.indexOf('%%BoundingBox: (atend)');
            if (toReplace){
                content[toReplace] = content[content.length-3];
            }
            fs.writeFileSync(inpFile,content.join('\n'));
            gs.executeSync(`-sDEVICE=pngalpha -o ./assets/img/rnaHybrid/${fileName}.png -sDEVICE=pngalpha -r144 -dEPSCrop ${inpFile}`);
        } catch (err) {
            // Handle error
            throw err
        }    
    })
}

// convertPsToPDF("F13D11.2.1-F13D11.2.1_cel-let-7_1");

// getRNAHybrid()